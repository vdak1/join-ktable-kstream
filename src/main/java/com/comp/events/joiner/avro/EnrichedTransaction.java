/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EnrichedTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8992510856119564553L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnrichedTransaction\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"Transaction\",\"type\":{\"type\":\"record\",\"name\":\"Transaction\",\"fields\":[{\"name\":\"IBAN\",\"type\":\"string\"},{\"name\":\"Date\",\"type\":\"long\"},{\"name\":\"PaymentType\",\"type\":\"string\"},{\"name\":\"Details\",\"type\":\"string\"},{\"name\":\"MoneyOut\",\"type\":\"double\"},{\"name\":\"MoneyIn\",\"type\":\"double\"},{\"name\":\"Balance\",\"type\":\"double\"}]}},{\"name\":\"Account\",\"type\":{\"type\":\"record\",\"name\":\"Account\",\"fields\":[{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Address\",\"type\":\"string\"},{\"name\":\"SortCode\",\"type\":\"string\"},{\"name\":\"AccountNo\",\"type\":\"string\"},{\"name\":\"IBAN\",\"type\":\"string\"},{\"name\":\"BIC\",\"type\":\"string\"},{\"name\":\"Branch\",\"type\":\"string\"},{\"name\":\"AccountType\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnrichedTransaction> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnrichedTransaction> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EnrichedTransaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EnrichedTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EnrichedTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EnrichedTransaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EnrichedTransaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EnrichedTransaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EnrichedTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private avro.Transaction Transaction;
  private avro.Account Account;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnrichedTransaction() {}

  /**
   * All-args constructor.
   * @param Transaction The new value for Transaction
   * @param Account The new value for Account
   */
  public EnrichedTransaction(avro.Transaction Transaction, avro.Account Account) {
    this.Transaction = Transaction;
    this.Account = Account;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Transaction;
    case 1: return Account;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Transaction = (avro.Transaction)value$; break;
    case 1: Account = (avro.Account)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Transaction' field.
   * @return The value of the 'Transaction' field.
   */
  public avro.Transaction getTransaction() {
    return Transaction;
  }


  /**
   * Sets the value of the 'Transaction' field.
   * @param value the value to set.
   */
  public void setTransaction(avro.Transaction value) {
    this.Transaction = value;
  }

  /**
   * Gets the value of the 'Account' field.
   * @return The value of the 'Account' field.
   */
  public avro.Account getAccount() {
    return Account;
  }


  /**
   * Sets the value of the 'Account' field.
   * @param value the value to set.
   */
  public void setAccount(avro.Account value) {
    this.Account = value;
  }

  /**
   * Creates a new EnrichedTransaction RecordBuilder.
   * @return A new EnrichedTransaction RecordBuilder
   */
  public static avro.EnrichedTransaction.Builder newBuilder() {
    return new avro.EnrichedTransaction.Builder();
  }

  /**
   * Creates a new EnrichedTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnrichedTransaction RecordBuilder
   */
  public static avro.EnrichedTransaction.Builder newBuilder(avro.EnrichedTransaction.Builder other) {
    if (other == null) {
      return new avro.EnrichedTransaction.Builder();
    } else {
      return new avro.EnrichedTransaction.Builder(other);
    }
  }

  /**
   * Creates a new EnrichedTransaction RecordBuilder by copying an existing EnrichedTransaction instance.
   * @param other The existing instance to copy.
   * @return A new EnrichedTransaction RecordBuilder
   */
  public static avro.EnrichedTransaction.Builder newBuilder(avro.EnrichedTransaction other) {
    if (other == null) {
      return new avro.EnrichedTransaction.Builder();
    } else {
      return new avro.EnrichedTransaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for EnrichedTransaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnrichedTransaction>
    implements org.apache.avro.data.RecordBuilder<EnrichedTransaction> {

    private avro.Transaction Transaction;
    private avro.Transaction.Builder TransactionBuilder;
    private avro.Account Account;
    private avro.Account.Builder AccountBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.EnrichedTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Transaction)) {
        this.Transaction = data().deepCopy(fields()[0].schema(), other.Transaction);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasTransactionBuilder()) {
        this.TransactionBuilder = avro.Transaction.newBuilder(other.getTransactionBuilder());
      }
      if (isValidValue(fields()[1], other.Account)) {
        this.Account = data().deepCopy(fields()[1].schema(), other.Account);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAccountBuilder()) {
        this.AccountBuilder = avro.Account.newBuilder(other.getAccountBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EnrichedTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.EnrichedTransaction other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.Transaction)) {
        this.Transaction = data().deepCopy(fields()[0].schema(), other.Transaction);
        fieldSetFlags()[0] = true;
      }
      this.TransactionBuilder = null;
      if (isValidValue(fields()[1], other.Account)) {
        this.Account = data().deepCopy(fields()[1].schema(), other.Account);
        fieldSetFlags()[1] = true;
      }
      this.AccountBuilder = null;
    }

    /**
      * Gets the value of the 'Transaction' field.
      * @return The value.
      */
    public avro.Transaction getTransaction() {
      return Transaction;
    }


    /**
      * Sets the value of the 'Transaction' field.
      * @param value The value of 'Transaction'.
      * @return This builder.
      */
    public avro.EnrichedTransaction.Builder setTransaction(avro.Transaction value) {
      validate(fields()[0], value);
      this.TransactionBuilder = null;
      this.Transaction = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Transaction' field has been set.
      * @return True if the 'Transaction' field has been set, false otherwise.
      */
    public boolean hasTransaction() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'Transaction' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public avro.Transaction.Builder getTransactionBuilder() {
      if (TransactionBuilder == null) {
        if (hasTransaction()) {
          setTransactionBuilder(avro.Transaction.newBuilder(Transaction));
        } else {
          setTransactionBuilder(avro.Transaction.newBuilder());
        }
      }
      return TransactionBuilder;
    }

    /**
     * Sets the Builder instance for the 'Transaction' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public avro.EnrichedTransaction.Builder setTransactionBuilder(avro.Transaction.Builder value) {
      clearTransaction();
      TransactionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Transaction' field has an active Builder instance
     * @return True if the 'Transaction' field has an active Builder instance
     */
    public boolean hasTransactionBuilder() {
      return TransactionBuilder != null;
    }

    /**
      * Clears the value of the 'Transaction' field.
      * @return This builder.
      */
    public avro.EnrichedTransaction.Builder clearTransaction() {
      Transaction = null;
      TransactionBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Account' field.
      * @return The value.
      */
    public avro.Account getAccount() {
      return Account;
    }


    /**
      * Sets the value of the 'Account' field.
      * @param value The value of 'Account'.
      * @return This builder.
      */
    public avro.EnrichedTransaction.Builder setAccount(avro.Account value) {
      validate(fields()[1], value);
      this.AccountBuilder = null;
      this.Account = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Account' field has been set.
      * @return True if the 'Account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'Account' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public avro.Account.Builder getAccountBuilder() {
      if (AccountBuilder == null) {
        if (hasAccount()) {
          setAccountBuilder(avro.Account.newBuilder(Account));
        } else {
          setAccountBuilder(avro.Account.newBuilder());
        }
      }
      return AccountBuilder;
    }

    /**
     * Sets the Builder instance for the 'Account' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public avro.EnrichedTransaction.Builder setAccountBuilder(avro.Account.Builder value) {
      clearAccount();
      AccountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Account' field has an active Builder instance
     * @return True if the 'Account' field has an active Builder instance
     */
    public boolean hasAccountBuilder() {
      return AccountBuilder != null;
    }

    /**
      * Clears the value of the 'Account' field.
      * @return This builder.
      */
    public avro.EnrichedTransaction.Builder clearAccount() {
      Account = null;
      AccountBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnrichedTransaction build() {
      try {
        EnrichedTransaction record = new EnrichedTransaction();
        if (TransactionBuilder != null) {
          try {
            record.Transaction = this.TransactionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Transaction"));
            throw e;
          }
        } else {
          record.Transaction = fieldSetFlags()[0] ? this.Transaction : (avro.Transaction) defaultValue(fields()[0]);
        }
        if (AccountBuilder != null) {
          try {
            record.Account = this.AccountBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Account"));
            throw e;
          }
        } else {
          record.Account = fieldSetFlags()[1] ? this.Account : (avro.Account) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnrichedTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnrichedTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnrichedTransaction>
    READER$ = (org.apache.avro.io.DatumReader<EnrichedTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.Transaction.customEncode(out);

    this.Account.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.Transaction == null) {
        this.Transaction = new avro.Transaction();
      }
      this.Transaction.customDecode(in);

      if (this.Account == null) {
        this.Account = new avro.Account();
      }
      this.Account.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.Transaction == null) {
            this.Transaction = new avro.Transaction();
          }
          this.Transaction.customDecode(in);
          break;

        case 1:
          if (this.Account == null) {
            this.Account = new avro.Account();
          }
          this.Account.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










